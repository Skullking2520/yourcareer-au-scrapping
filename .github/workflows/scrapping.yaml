name: Run Scrapping

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-occupation-scraping:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install Google Chrome
      run: |
        set -ex
        sudo apt-get update -y
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt install -y ./google-chrome-stable_current_amd64.deb
        sudo apt-get install -y -f

    - name: Install Chromedriver
      run: |
        sudo apt-get install -y unzip
        wget https://storage.googleapis.com/chrome-for-testing-public/132.0.6834.83/linux64/chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Occupation Scraping
      env:
        SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
      run: |
        python main.py

  run-vacancies-scraping:
    runs-on: [self-hosted, runner]

    steps:
    - name: Wait for 15 minutes
      shell: powershell
      run: Start-Sleep -Seconds 900

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install Google Chrome (if not installed)
      shell: powershell
      run: |
        $chromePath = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        if (Test-Path $chromePath) {
            Write-Host "Chrome is already installed at $chromePath. Skipping installation."
            exit 0
        }
        else {
            Write-Host "Chrome not found. Installing via winget..."
            try {
                $output = winget install --id=Google.Chrome --silent --accept-package-agreements --accept-source-agreements -ErrorAction Stop 2>&1
                Write-Host $output
            }
            catch {
                $err = $_.Exception.Message
                Write-Host "winget install error: $err"
                if ($err -match "이미 설치된 기존 패키지를 찾았습니다") {
                    Write-Host "Chrome is already installed or no upgrade available. Continuing..."
                    exit 0
                }
                else {
                    Write-Error "winget install failed with error: $err"
                    exit 1
                }
            }
        }

    - name: Install Chromedriver
      shell: powershell
      run: |
        Write-Host "Downloading Chromedriver..."
        $chromedriverUrl = "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/132.0.6899.13/win64/chromedriver-win64.zip"
        try {
            Invoke-WebRequest -Uri $chromedriverUrl -OutFile "chromedriver-win64.zip" -ErrorAction Stop
        }
        catch {
            Write-Host "Failed to download Chromedriver from $chromedriverUrl. Exiting..."
            exit 1
        }
        Write-Host "Extracting Chromedriver..."
        Expand-Archive -Path "chromedriver-win64.zip" -DestinationPath "chromedriver" -Force
        $chromedriverPath = Join-Path (Resolve-Path "chromedriver") "chromedriver.exe"
        Write-Host "Adding Chromedriver directory to PATH"
        $env:PATH = "$env:PATH;$([System.IO.Path]::GetDirectoryName($chromedriverPath))"
        Write-Host "Chromedriver installed at: $chromedriverPath"

    - name: Install dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Vacancies Scraping
      shell: powershell
      env:
        SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY }}
      run: |
        python vacancy.py
